# -*- coding: utf-8 -*-
"""TrafficSign.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C9zzib5P42IT0Zlp_anNXGilHS7Mx1Kg

Part 1 Basline (small data set)

---
"""

from google.colab import drive
drive.mount('/content/gdrive')

from xml.dom import minidom

path="/content/gdrive/MyDrive/BenchMark Data Set for Road Signs/annotations/"
count="0"
file = minidom.parse(path+"road"+count+".xml")
Object = file.getElementsByTagName('name')
print(Object[0].firstChild.data)

from google.colab import drive
drive.mount('/content/gdrive')

from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D,MaxPool2D,Dense,Flatten,Dropout
from skimage.transform import resize
#160 images
data=[]
labels=[]
path="/content/gdrive/My Drive/AdverTrafficIMages/"   #change to group drive
#first 51 images of traffic lights
for x in range(52):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  #print(image)
  data.append(image)
  labels.append(1)

#stop sign
for x in range(52,100):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  #print(image)
  data.append(image)
  labels.append(2)
#speed sign

for x in range(100,122):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  #print(image)
  data.append(image)
  labels.append(3)

#crosswalk
for x in range(122,159):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  #print(image)
  data.append(image)
  labels.append(4)

data=np.array(data)
labels=np.array(labels)

X_train,X_test,Y_train,Y_test=train_test_split(data,labels,test_size=0.1,random_state=42)

# X is image, Y is label. Random state 42 and test size is 10%, small dataset
Y_train=to_categorical(Y_train,5)
Y_test=to_categorical(Y_test,5)

#Build CNN
model=Sequential()
model.add(Conv2D(filters=26,kernel_size=(3,3),padding='same',activation='relu',input_shape=X_train.shape[1:]))
model.add(Flatten())
model.add(Dense(5, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])
epochs = 10

history = model.fit(X_train, Y_train, batch_size=6, epochs=epochs, validation_data=(X_test, Y_test))

pred = model.predict_classes(X_test)
model.evaluate(X_test,Y_test)
pretty=[]
for x in pred:
  if x==1:
    pretty.append("Traffic Light")
  elif x==2:
     pretty.append("Stop Sign")
  elif x==3:
     pretty.append("Speed Sign")
  elif x==4:
     pretty.append("CrossWalk Sign")
w=100
h=100
fig=plt.figure(figsize=(48, 48))
columns = 17
rows = 7
for i in range(6, 16):
    fig.add_subplot(rows, columns,i)
    plt.imshow(X_test[i])
plt.show()
print(pretty[6:18])

##Load saved model. remove comments to save
from keras import models
from google.colab import drive
drive.mount('/content/gdrive')
#!ls /content/gdrive/MyDrive/
#model.save("/content/gdrive/My Drive/Model" )
from tensorflow import keras
model = keras.models.load_model('/content/gdrive/My Drive/Model/')

drive.mount('/content/gdrive')
from google.colab import drive
import matplotlib.pyplot as plt
from skimage.transform import resize
import numpy as np
from keras.utils import to_categorical
path="/content/gdrive/My Drive/fooling/fooling"  
data=[]
labels=[]
fooling1=plt.imread(path+"1.jpg")
fooling1=resize(fooling1,(200,200,4))
image1=np.array(fooling1)
data.append(image1)
labels.append(2)

fooling2=plt.imread(path+"2.jpg")
fooling2=resize(fooling2,(200,200,4))
image2=np.array(fooling2)
data.append(image2)
labels.append(2)

fooling3=plt.imread(path+"3.jpg")
fooling3=resize(fooling2,(200,200,4))
image3=np.array(fooling3)
data.append(image3)
labels.append(3)

fooling4=plt.imread(path+"4.jpg")
fooling4=resize(fooling4,(200,200,4))
image4=np.array(fooling4)
data.append(image4)
labels.append(3)

fooling5=plt.imread(path+"5.jpg")
fooling5=resize(fooling5,(200,200,4))
image5=np.array(fooling5)
data.append(image5)
labels.append(4)


data=np.array(data)
labels=np.array(labels)

model.summary()
print(data.shape)

pred2 = model.predict_classes(data)
#model.evaluate(data,labels)
pretty=[]
for x in pred2:
  if x==1:
    pretty.append("Traffic Light")
  elif x==2:
     pretty.append("Stop Sign")
  elif x==3:
     pretty.append("Speed Sign")
  elif x==4:
     pretty.append("CrossWalk Sign")

w=100
h=100
fig=plt.figure(figsize=(24, 24))
columns = 5
rows = 1
for i in range(1, 6 ):
    fig.add_subplot(rows, columns, i)
    i=str(i)
    img=plt.imread(path+i+".jpg")
    plt.imshow(img)
plt.show()
print(pred2)
print(pretty)

"""


---


PART 2
# Create bigger CNN with more images"""

from google.colab import drive
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D,MaxPool2D,Dense,Flatten,Dropout,AveragePooling2D
from skimage.transform import resize
data2=[]
labels2=[]
drive.mount('/content/gdrive')
path="/content/gdrive/My Drive/AdverTrafficIMages/"   #change to group drive
#first 51 images of traffic lights
for x in range(52):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  data2.append(image)
  labels2.append(1)

  image2=plt.imread(path+"road"+x+".png")
  image2=resize(image,(250,250))
  image2=np.array(image2)
  data2.append(image)
  labels2.append(1)


#stop sign
for x in range(52,100):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  data2.append(image)
  labels2.append(2)

  image2=plt.imread(path+"road"+x+".png")
  image2=resize(image,(250,250))
  image2=np.array(image2)
  data2.append(image)
  labels2.append(2)
#speed sign

for x in range(100,122):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  #print(image)
  data2.append(image)
  labels2.append(3)

  image2=plt.imread(path+"road"+x+".png")
  image2=resize(image,(250,250))
  image2=np.array(image2)
  data2.append(image)
  labels2.append(3)

#crosswalk
for x in range(122,159):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  #print(image)
  data2.append(image)
  labels2.append(4)
  
  image2=plt.imread(path+"road"+x+".png")
  image2=resize(image,(250,250))
  image2=np.array(image2)
  data2.append(image)
  labels2.append(4)
data2=np.array(data2)
labels2=np.array(labels2)

X_train2,X_test2,Y_train2,Y_test2=train_test_split(data2,labels2,test_size=0.2,random_state=42)

# X is image, Y is label. Random state 42 and test size is 20%, small dataset
Y_train2=to_categorical(Y_train2,5)
Y_test2=to_categorical(Y_test2,5)

print(len(data2))

#Build CNN2
model_bigger=Sequential()
model_bigger.add(Conv2D(filters=32,kernel_size=(3,3),padding='same',activation='relu',input_shape=X_train2.shape[1:]))
model_bigger.add(AveragePooling2D(pool_size=(3,3)))
model_bigger.add(Conv2D(filters=32,kernel_size=(3,3),padding='same',activation='relu'))
model_bigger.add(AveragePooling2D(pool_size=(3,3)))
model_bigger.add(Dropout(0.25))



model_bigger.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])
epochs = 15

history = model_bigger.fit(X_train2, Y_train2, batch_size=32, epochs=epochs, validation_data=(X_test2, Y_test2))

# list all data in history
print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

from keras import models
import keras
from google.colab import drive
drive.mount('/content/gdrive')
#!ls /content/gdrive/MyDrive/
#model2.save("/content/gdrive/My Drive/Model2" )
#from tensorflow import keras


#orginally called model2
model2 = keras.models.load_model('/content/gdrive/My Drive/Model2/')

pred2 = np.argmax(model2.predict(X_train2), axis=-1)
model2.evaluate(X_test2,Y_test2)
pretty2=[]
for x in pred2:
  if x==1:
    pretty2.append("Traffic Light")
  elif x==2:
     pretty2.append("Stop Sign")
  elif x==3:
     pretty2.append("Speed Sign")
  elif x==4:
     pretty2.append("CrossWalk Sign")
w=100
h=100
fig=plt.figure(figsize=(48, 48))
columns = 17
rows = 7
for i in range(45, 50):
    fig.add_subplot(rows, columns,i)
    plt.imshow(X_test2[i])
plt.show()
print(pretty[45:50])



drive.mount('/content/gdrive')
from google.colab import drive
import matplotlib.pyplot as plt
from skimage.transform import resize
import numpy as np
from tensorflow.keras.utils import to_categorical
path="/content/gdrive/My Drive/fooling/fooling"  
Fooling_data=[]
Fooling_labels=[]
fooling1=plt.imread(path+"1.png")
fooling1=resize(fooling1,(200,200))

image1=np.array(fooling1)
Fooling_data.append(image1)
Fooling_labels.append(2)

fooling2=plt.imread(path+"2.png")
fooling2=resize(fooling2,(200,200))
image2=np.array(fooling2)
Fooling_data.append(image2)
Fooling_labels.append(2)

fooling3=plt.imread(path+"3.png")
fooling3=resize(fooling3,(200,200))
image3=np.array(fooling3)
Fooling_data.append(image3)
Fooling_labels.append(3)

fooling4=plt.imread(path+"4.png")
fooling4=resize(fooling4,(200,200))
image4=np.array(fooling4)
Fooling_data.append(image4)
Fooling_labels.append(3)


fooling5=plt.imread(path+"5.png")
fooling5=resize(fooling5,(200,200))
image5=np.array(fooling5)
Fooling_data.append(image5)
Fooling_labels.append(4)

fooling6=plt.imread(path+"6.png")
fooling6=resize(fooling6,(200,200))
image6=np.array(fooling6)
Fooling_data.append(image6)
Fooling_labels.append(4)

fooling7=plt.imread(path+"7.png")
fooling7=resize(fooling7,(200,200))
image7=np.array(fooling7)
Fooling_data.append(image7)
Fooling_labels.append(2)

fooling8=plt.imread(path+"8.png")
fooling8=resize(fooling8,(200,200))
image8=np.array(fooling8)
Fooling_data.append(image8)
Fooling_labels.append(2)
 

Fooling_data=np.array(Fooling_data)
Fooling_labels=np.array(Fooling_labels)




model2.summary()





pred3 = np.argmax(model2.predict(Fooling_data), axis=-1)
print(pred3)
pretty3=[]
for x in pred3:
  if x==1:
    pretty3.append("Traffic Light")
  elif x==2:
     pretty3.append("Stop Sign")
  elif x==3:
     pretty3.append("Speed Sign")
  elif x==4:
     pretty3.append("CrossWalk Sign")

w=100
h=100
fig=plt.figure(figsize=(24, 24))
columns = 8
rows = 1
for i in range(1, 9 ):
    fig.add_subplot(rows, columns, i)
    plt.imshow(Fooling_data[i-1])
plt.show()

print("Correct numbers")
print(Fooling_labels)
print(len(Fooling_data ))

print(pred3)
print(pretty3)

"""


---


PART 3
# Create bigger CNN with more images and train with fooling images
"""

from google.colab import drive
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D,MaxPool2D,Dense,Flatten,Dropout,AveragePooling2D
from skimage.transform import resize
data2=[]
labels2=[]
drive.mount('/content/gdrive')
path="/content/gdrive/My Drive/AdverTrafficIMages/"   #change to group drive
#first 51 images of traffic lights



for x in range(52):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  data2.append(image)
  labels2.append(1)

  image2=plt.imread(path+"road"+x+".png")
  image2=resize(image,(250,250))
  image2=np.array(image2)
  data2.append(image)
  labels2.append(1)



#stop sign
for x in range(52,100):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  data2.append(image)
  labels2.append(2)

  image2=plt.imread(path+"road"+x+".png")
  image2=resize(image,(250,250))
  image2=np.array(image2)
  data2.append(image)
  labels2.append(2)
#speed sign

for x in range(100,122):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  #print(image)
  data2.append(image)
  labels2.append(3)

  image2=plt.imread(path+"road"+x+".png")
  image2=resize(image,(250,250))
  image2=np.array(image2)
  data2.append(image)
  labels2.append(3)

#crosswalk
for x in range(122,159):
  x=str(x)
  image=plt.imread(path+"road"+x+".png")
  image=resize(image,(200,200))
  image=np.array(image)
  #print(image)
  data2.append(image)
  labels2.append(4)
  
  image2=plt.imread(path+"road"+x+".png")
  image2=resize(image,(250,250))
  image2=np.array(image2)
  data2.append(image)
  labels2.append(4)

print(len(data2))
from random import *
random_Numbers=[]


while len(random_Numbers) <= 5:
  w=randint(52,100)
  if w not in random_Numbers:
    random_Numbers.append(w)
    labels2.append(2)

while len(random_Numbers) <= 10:
  y=randint(100,122)
  if y not in random_Numbers:
    random_Numbers.append(y)
    labels2.append(3)

while len(random_Numbers) <= 15:
  z=randint(122,159)
  if z not in random_Numbers:
    random_Numbers.append(z)
    labels2.append(4)


print(random_Numbers)

blurred=[]
from scipy import ndimage
for x in random_Numbers:
  blurred.append(ndimage.gaussian_filter(data2[x], sigma=1.5) )



data2=data2+blurred
plt.imshow(blurred[1])



data2=np.array(data2)
labels2=np.array(labels2)

X_train2,X_test2,Y_train2,Y_test2=train_test_split(data2,labels2,test_size=0.2,random_state=42)

# X is image, Y is label. Random state 42 and test size is 20%, small dataset
Y_train2=to_categorical(Y_train2,5)
Y_test2=to_categorical(Y_test2,5)
print(len(data2))

#Build CNN2
model2=Sequential()
model2.add(Conv2D(filters=32,kernel_size=(3,3),padding='same',activation='relu',input_shape=X_train2.shape[1:]))
model2.add(AveragePooling2D(pool_size=(3,3)))
model2.add(Conv2D(filters=32,kernel_size=(3,3),padding='same',activation='relu'))
model2.add(AveragePooling2D(pool_size=(3,3)))
model2.add(Dropout(0.25))


model2.add(Flatten())

model2.add(Dense(5, activation='softmax'))


model2.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])
epochs = 20

history = model2.fit(X_train2, Y_train2, batch_size=1, epochs=epochs, validation_data=(X_test2, Y_test2))

# list all data in history
print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

from keras import models
import keras
from google.colab import drive
drive.mount('/content/gdrive')
#!ls /content/gdrive/MyDrive/
#model2.save("/content/gdrive/My Drive/Model2" )
#from tensorflow import keras
model2 = keras.models.load_model('/content/gdrive/My Drive/Model2/')

pred2  = np.argmax(model2.predict(X_test2), axis=-1)
model2.evaluate(X_test2,Y_test2)
print(pred2)
pretty2=[]
for x in pred2:
  if x==1:
    pretty2.append("Traffic Light")
  elif x==2:
     pretty2.append("Stop Sign")
  elif x==3:
     pretty2.append("Speed Sign")
  elif x==4:
     pretty2.append("CrossWalk Sign")
w=100
h=100
fig=plt.figure(figsize=(48, 48))
columns = 17
rows = 7
for i in range(6, 16):
    fig.add_subplot(rows, columns,i)
    plt.imshow(X_test2[i])
  
plt.show()
print(pretty2[6:16])

drive.mount('/content/gdrive')
from google.colab import drive
import matplotlib.pyplot as plt
from skimage.transform import resize
import numpy as np
from tensorflow.keras.utils import to_categorical
path="/content/gdrive/My Drive/fooling/fooling"  
Fooling_data=[]
Fooling_labels=[]
fooling1=plt.imread(path+"1.png")
fooling1=resize(fooling1,(200,200,4))

image1=np.array(fooling1)
Fooling_data.append(image1)
Fooling_labels.append(2)

fooling2=plt.imread(path+"2.png")
fooling2=resize(fooling2,(200,200,4))
image2=np.array(fooling2)
Fooling_data.append(image2)
Fooling_labels.append(2)

fooling3=plt.imread(path+"3.png")
fooling3=resize(fooling3,(200,200,4))
image3=np.array(fooling3)
Fooling_data.append(image3)
Fooling_labels.append(3)

fooling4=plt.imread(path+"4.png")
fooling4=resize(fooling4,(200,200,4))
image4=np.array(fooling4)
Fooling_data.append(image4)
Fooling_labels.append(3)


fooling5=plt.imread(path+"5.png")
fooling5=resize(fooling5,(200,200,4))
image5=np.array(fooling5)
Fooling_data.append(image5)
Fooling_labels.append(4)

fooling6=plt.imread(path+"6.png")
fooling6=resize(fooling6,(200,200,4))
image6=np.array(fooling6)
Fooling_data.append(image6)
Fooling_labels.append(4)

fooling7=plt.imread(path+"7.png")
fooling7=resize(fooling7,(200,200,4))
image7=np.array(fooling7)
Fooling_data.append(image7)
Fooling_labels.append(2)

fooling8=plt.imread(path+"8.png")
fooling8=resize(fooling8,(200,200,4))
image8=np.array(fooling8)
Fooling_data.append(image8)
Fooling_labels.append(2)
 

Fooling_data=np.array(Fooling_data)
Fooling_labels=np.array(Fooling_labels)




model2.summary()



pred3 = np.argmax(model2.predict(Fooling_data), axis=-1)
print(pred3)
pretty3=[]
for x in pred3:
  if x==1:
    pretty3.append("Traffic Light")
  elif x==2:
     pretty3.append("Stop Sign")
  elif x==3:
     pretty3.append("Speed Sign")
  elif x==4:
     pretty3.append("CrossWalk Sign")

w=100
h=100
fig=plt.figure(figsize=(24, 24))
columns = 8
rows = 1
for i in range(1, 9 ):
    fig.add_subplot(rows, columns, i)
    plt.imshow(Fooling_data[i-1])
plt.show()

print("Correct numbers")
print(Fooling_labels)
print(len(Fooling_data ))

print(pred3)
print(pretty3)

from keras import models
import keras
from google.colab import drive
drive.mount('/content/gdrive')
#!ls /content/gdrive/MyDrive/
#model2.save("/content/gdrive/My Drive/Mode_86" )
#from tensorflow import keras
#model_86 = keras.models.load_model('/content/gdrive/My Drive/Mode_86/')